{-
   CVPartner

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.1
   CVPartner API version: 0.0.1
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : CVPartner.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module CVPartner.API.ApiDefault where

import CVPartner.Core
import CVPartner.MimeTypes
import CVPartner.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Default

-- *** findCountries

-- | @GET \/api\/v1\/countries@
--
findCountries
  :: Accept accept -- ^ request accept ('MimeType')
  -> CVPartnerRequest FindCountries MimeNoContent [Country] accept
findCountries  _ =
  _mkRequest "GET" ["/api/v1/countries"]

data FindCountries
-- | @*/*@
instance MimeType mtype => Produces FindCountries mtype


-- *** getCvSection

-- | @GET \/api\/v3\/cvs\/{user_id}\/{cv_id}\/{section_type}\/{section_id}@
--
getCvSection
  :: Accept accept -- ^ request accept ('MimeType')
  -> UserId -- ^ "userId"
  -> CvId -- ^ "cvId"
  -> SectionType -- ^ "sectionType"
  -> SectionId -- ^ "sectionId"
  -> CVPartnerRequest GetCvSection MimeNoContent CvSection accept
getCvSection  _ (UserId userId) (CvId cvId) (SectionType sectionType) (SectionId sectionId) =
  _mkRequest "GET" ["/api/v3/cvs/",toPath userId,"/",toPath cvId,"/",toPath sectionType,"/",toPath sectionId]

data GetCvSection
-- | @*/*@
instance MimeType mtype => Produces GetCvSection mtype


-- *** getFullCv

-- | @GET \/api\/v3\/cvs\/{user_id}\/{cv_id}@
--
getFullCv
  :: Accept accept -- ^ request accept ('MimeType')
  -> UserId -- ^ "userId"
  -> CvId -- ^ "cvId"
  -> CVPartnerRequest GetFullCv MimeNoContent Cv accept
getFullCv  _ (UserId userId) (CvId cvId) =
  _mkRequest "GET" ["/api/v3/cvs/",toPath userId,"/",toPath cvId]

data GetFullCv
-- | @*/*@
instance MimeType mtype => Produces GetFullCv mtype


-- *** getUserById

-- | @GET \/api\/v1\/users\/{user_id}@
--
getUserById
  :: Accept accept -- ^ request accept ('MimeType')
  -> UserId -- ^ "userId"
  -> CVPartnerRequest GetUserById MimeNoContent User accept
getUserById  _ (UserId userId) =
  _mkRequest "GET" ["/api/v1/users/",toPath userId]

data GetUserById
-- | @*/*@
instance MimeType mtype => Produces GetUserById mtype


-- *** searchByName

-- | @POST \/api\/v4\/search@
--
searchByName
  :: (Consumes SearchByName MimeJSON, MimeRender MimeJSON SearchByNameReq)
  => Accept accept -- ^ request accept ('MimeType')
  -> SearchByNameReq -- ^ "searchByNameReq"
  -> CVPartnerRequest SearchByName MimeJSON CvList accept
searchByName  _ searchByNameReq =
  _mkRequest "POST" ["/api/v4/search"]
    `setBodyParam` searchByNameReq

data SearchByName
instance HasBodyParam SearchByName SearchByNameReq

-- | @application/json@
instance Consumes SearchByName MimeJSON

-- | @*/*@
instance MimeType mtype => Produces SearchByName mtype


-- *** userSearch

-- | @GET \/api\/v2\/users\/search@
--
userSearch
  :: Accept accept -- ^ request accept ('MimeType')
  -> CVPartnerRequest UserSearch MimeNoContent [User] accept
userSearch  _ =
  _mkRequest "GET" ["/api/v2/users/search"]

data UserSearch
instance HasOptionalParam UserSearch From where
  applyOptionalParam req (From xs) =
    req `addQuery` toQuery ("from", Just xs)
instance HasOptionalParam UserSearch Size where
  applyOptionalParam req (Size xs) =
    req `addQuery` toQuery ("size", Just xs)
instance HasOptionalParam UserSearch SortBy where
  applyOptionalParam req (SortBy xs) =
    req `addQuery` toQuery ("sort_by", Just xs)
instance HasOptionalParam UserSearch Deactivated where
  applyOptionalParam req (Deactivated xs) =
    req `addQuery` toQuery ("deactivated", Just xs)
instance HasOptionalParam UserSearch Role where
  applyOptionalParam req (Role xs) =
    req `addQuery` toQuery ("role", Just xs)
instance HasOptionalParam UserSearch Name where
  applyOptionalParam req (Name xs) =
    req `addQuery` toQuery ("name", Just xs)
instance HasOptionalParam UserSearch OfficeIds where
  applyOptionalParam req (OfficeIds xs) =
    req `addQuery` toQueryColl MultiParamArray ("office_ids", Just xs)
-- | @*/*@
instance MimeType mtype => Produces UserSearch mtype
